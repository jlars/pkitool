#!/bin/sh
#
#  pkitool
#
#  Tool to generate a self signed CA certificate, server and client
#  X.509 private key and public certificate pairs, and PKCS #12 files.
#
#  This script depends on the strongSwan PKI tool for key/cert creation
#  and the openssl command for PKCS #12.
#
#  A full set keys and certificates suitable for an IPSec VPN can be
#  generated by running the following commands:
#
#    pkitool ca
#    pkitool server
#    pkitool client
#
#  However some VPN clients (e.g. iOS, Windows 7) place certain
#  restrictions on the server certificate which require appropriate
#  values for the subjectAltName and extendedKeyUsage flag. In this
#  case the server certifcate should be generated as follows:
#
#    pkitool server --san <IP or FQDN of server> --flag serverAuth
#
#  The SAN and FLAG settings may alternately be specified in an
#  external configuration file. Full details and complete instructions
#  are provided by running:
#
#    pkitool --help
#

defaults() {
    PKI=${PKI:-}
    CA=${CA:-"ca"}
    SERVER=${SERVER:-"server"}
    CLIENT=${CLIENT:-"client"}
    PKCS12=${PKCS12:-"client"}
    KEY=${KEY:-"-key"}
    CERT=${CERT:-"-cert"}
    FORMAT=${FORMAT:-"pem"}
    CAKEY=${CAKEY:-"$CA$KEY.${format:-$FORMAT}"}
    CACERT=${CACERT:-"$CA$CERT.${format:-$FORMAT}"}
    CA_DN=${CA_DN:-"C=CC, O=Unaffiliated, CN=CA"}
    SERVER_DN=${SERVER_DN:-"C=CC, O=Unaffiliated, CN=${name:-$SERVER}"}
    CLIENT_DN=${CLIENT_DN:-"C=CC, O=Unaffiliated, CN=${name:-$CLIENT}"}
    P12=${P12:-}
    P12CA=${P12:-"ca"}
    WITHCA=${WITHCA:-"no"}
    FNAME=${FNAME:-}
    CANAME=${CANAME:-}
    SERVER_SAN=${SERVER_SAN:-}
    CLIENT_SAN=${CLIENT_SAN:-}
    SERVER_FLAG=${SERVER_FLAG:-}
    CLIENT_FLAG=${CLIENT_FLAG:-}
    SIZE=${SIZE:-}
    LIFETIME=${LIFETIME:-}
}

show_help() {
echo "Usage: $prog <command> [options]"'

ca [options]:

  ca [--conf file] [--format der|pem] [--name prefix] [--dn "DN string"] \
     [--size bits] [--lifetime days]

server|client [options]:

  command [--conf file] [--format der|pem] [--cakey file] [--cacert file] \
          [--name prefix] [--dn "DN string"] [--san subjectAltName] \
          [--flag serverAuth|clientAuth] [--size bits] [--lifetime days]

pkcs12 [options]:

  pkcs12 [--conf file] [--name prefix] [--fname "friendly name"] \
         [--withca yes|no] [--cacert file] [--caname "ca friendly name"]

commands:

  ca        generate CA private key and self signed certificate
  server    generate server key/certifcate pair, signed by CA
  client    generate client key/certificate pair, signed by CA
  pkcs12    generate PKCS #12

options:

  --conf filename     use <filename> for configuration file
  --format der|pem    generate key/cert in der or pem format
  --cakey filename    use <filename> for CA key file
  --cacert filename   use <filename> for CA certificate file
  --name prefix       prepend <prefix> to ca|server|client key/cert files or
                        for pkcs12 identify which key/cert to include and
                        prepend same <prefix> for PKCS #12 file
  --dn "DN string"    use <DN string> as certificate DN
  --san vpn.my.com    use <vpn.my.com> for certificate subjectAltName
  --flag serverAuth|  set certificate extendedKeyUsage flag to serverAuth
         clientAuth     or clientAuth
  --size N         set private key size to <N> bits
  --lifetime N        set certificate valid lifetime to  <N> day
  --fname "Frnd Nm"   use <Frnd Nm> as friendly name for PKCS #12 key/cert
  --withca yes|no     include CA certificate in PKCS #12
  --caname "Frnd CA"  use <Frnd CA> as friendly name for CA in PKCS #12

configuration file:

  If --conf option is not specified then a configuration file will be
  searched for with the following priority:

    '"./$prog.conf"'
    '"~/.$prog.conf"'
    '"/etc/$prog.conf"'

  Only the highest priority configuration file will be sourced. The
  configuration file may be empty or missing. In this case only defaults
  and/or command line options will be used.

example:

  '"$prog"' ca
  '"$prog"' server --name gateway --san vpn.mydomain.com --flag serverAuth
  '"$prog"' client --name rw --san myclient@mydomain.com
  '"$prog"' pkcs12 --name rw --withca=yes
'
}

ca() {
    no_clobber "$key"; no_clobber "$cert"
    pki_gen > "$key"
    pki_self < "$key" > "$cert"
}

server() {
    no_clobber "$key"; no_clobber "$cert"
    pki_gen > "$key"
    pki_pub_issue < "$key" > "$cert"
}

client() { server; }

pkcs12() {
    no_clobber "$p12"
    ( pem_out "rsa" < "$key"; pem_out "x509" < "$cert"; \
    [ "$withca" = yes ] && pem_out "x509" < "$cacert"; ) | \
    openssl_pkcs12 > "$p12"
}

pki_gen() { $pki --gen ${size:+--size} "$size" --outform "$format"; }

pki_self() {
    $pki --self --dn "$dn" ${lifetime:+--lifetime} "$lifetime" \
    --ca --outform "$format"
}

pki_pub_issue() {
    $pki --pub | $pki --issue --cacert "$cacert" --cakey "$cakey" \
    --dn "$dn" ${san:+--san} "$san" ${lifetime:+--lifetime} "$lifetime" \
    ${flag:+--flag} "$flag" --outform "$format"
}

pem_out() { openssl $1 -inform $(echo "$format" | tr a-z A-Z) -outform "PEM"; }

openssl_pkcs12() { openssl pkcs12 -export -name "$fname" -caname "$caname"; }

conf() {
    [ "$conf" ] && {
        conf=${conf:+"$( dirname "$conf" )/$( basename "$conf" )"}
        r_file "$conf"
        . "$conf"
    } || {
        conf=$prog.conf
        [ -r "./$conf" ]    && .    "./$conf"    || {
        [ -r "$HOME/.$conf" ]   && .   "$HOME/.$conf"; } || {
        [ -r "/etc/$conf" ] && . "/etc/$conf"; }
    }
}

format() {
    format=${format:-$FORMAT}
    [ "$format" = "der" ] || [ "$format" = "pem" ] || {
        echo "$prog: format must be \"der\" or \"pem\"." >&2
        exit 1
    }
}

pki() {
    [ -x "${pki:=$PKI}" ] || \
    pki="/usr/lib/ipsec/pki" && [ -x "$pki" ] || \
    pki=$( which pki ) && [ -x "$pki" ] || \
    { echo "$prog: pki tool not found." >&2; exit 1; }
}

p12() {
    [ "$withca" = "yes" ] && P12=$P12CA
    p12=${p12:-$P12};
    p12="$name$P12.p12"
}

withca() {
    withca=${withca:-$WITHCA}
    [ "$withca" = "yes" ] || [ "$withca" = "no" ] || {
        echo "$prog $command: WITHCA=$withca, but should only be \"yes\" or \"no\"" >&2
        exit 1
    }

}

cakey() { cakey=${cakey:-$CAKEY}; }
cacert() { cacert=${cacert:-$CACERT}; }
name() { name=${name:-$( eval echo \$$COMMAND )}; }
key() { key=$name$KEY.$format; }
cert() { cert=$name$CERT.$format; }
dn() { dn=${dn:-$( eval echo \$"${COMMAND}_DN" )}; }
san() { san=${san:-$( eval echo \$"${COMMAND}_SAN" )}; }
flag() { flag=${flag:-$( eval echo \$"${COMMAND}_FLAG" )}; }
size() { size=${size:-$size}; }
lifetime() { lifetime=${lifetime:-$LIFETIME}; }
fname() { fname=${fname:-$FNAME}; }
caname() { caname=${caname:-$CANAME}; }

get_command() {
    [ "$1" ] || {
        echo "Usage: $prog <command> [options]"
        try_help
    }
    case "$1" in
        ca|server|client|pkcs12)
            command=$1
            COMMAND=$( echo $command | tr a-z A-Z )
            ;;
        --help)
            show_help
            exit 0
            ;;
        -*|--*)
            echo "$prog: $1 unexpected" >&2
            echo "A valid command must precede any options." >&2
            try_help
            ;;
        *)
            echo "$prog: $1 is not a valid command." >&2
            try_help
            ;;
    esac
}

get_options() {
    while [ $# -gt 1 ]; do
    case "$2" in
        --conf|--cakey|--cacert|--format|--name|--dn|--san|\
        --flag|--size|--lifetime|--fname|--withca|--caname)
            process_arg "$2" "$3"
            ;;
        --conf=*|--cakey=*|--cacert=*|--format=*|--name=*|--dn=*|--san=*|\
        --flag=*|--size=*|--lifetime=*|--fname=*|--withca=*|--caname=*)
            process_eqarg "$2"
            ;;
        --help)
            show_help
            exit 0
            ;;
        -*|--*)
            echo "$prog $command: invalid option \"$2\"." >&2
            try_help
            ;;
    esac
    shift
    done
}

process_arg() {
    case "$2" in
        ""|-*) no_arg "$1";;
        *) eval ${1#--}=\"$2\"; shift;;
    esac
}

process_eqarg() {
    arg=${1#*=}; opt=${1%%=*}
    [ -z "$arg" ] && no_arg "${1%=}" || \
    eval ${opt#--}=\"$arg\"
}

no_arg() {
    echo "$prog $command: \"$1\" is missing an argument." >&2
}

r_file() {
    [ -r "$1" ] || {
        echo "$prog $command: $1 not found." >&2
        exit 1
    }
}

no_clobber() {
    [ -f "$1" ] && {
        echo "$prog $command: $1 already exists." >&2
        exit 1
    }
}

try_help() {
    echo "Try '$0 --help' for more information."
    exit 1
}

prog=${0##*/}
get_command "$1"
get_options "$@"
conf
defaults
format
case $command in
    ca)
        pki; name; key; cert; dn
        size; lifetime
        ;;
    server)
        pki; cakey; cacert
        r_file "$cakey"; r_file "$cacert"
        name; key; cert; dn
        san; flag; size; lifetime
        ;;
    client)
        pki; cakey; cacert
        r_file "$cakey"; r_file "$cacert"
        name; key; cert; dn
        san; flag; size; lifetime
        ;;
    pkcs12)
        name; key; cert;
        r_file "$key"; r_file "$cert";
        fname; withca; p12
        [ "$withca" = "yes" ] && {
            cacert; r_file "$cacert"; caname
        }
        ;;
esac
eval $command
